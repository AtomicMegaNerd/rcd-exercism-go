package encode

import (
	"fmt"
	"regexp"
	"strconv"
)

type Cluster struct {
	ch    rune
	count int
}

func NewCluster(ch rune) Cluster {
	return Cluster{ch: ch, count: 1}
}

func NewClusterFromEncoded(ch rune, count int) Cluster {
	return Cluster{ch: ch, count: count}
}

func (c *Cluster) increment() {
	c.count++
}

func (c *Cluster) ToEncodedString() string {
	if c.count == 1 {
		return string(c.ch)
	}
	return fmt.Sprintf("%d%c", c.count, c.ch)
}

func (c *Cluster) ToDecodedString() string {
	decodedString := ""
	for ix := 0; ix < c.count; ix++ {
		decodedString += string(c.ch)
	}
	return decodedString
}

func RunLengthEncode(input string) string {
	encodedString := ""
	clusters := make([]Cluster, 0)

	var currentCluster Cluster
	for ix, ch := range input {
		if ix == 0 {
			currentCluster = NewCluster(ch)
			continue
		}

		if ch != currentCluster.ch {
			clusters = append(clusters, currentCluster)
			currentCluster = NewCluster(ch)
		} else {
			currentCluster.increment()
		}

		if ix == len(input)-1 {
			clusters = append(clusters, currentCluster)
		}
	}

	for _, cluster := range clusters {
		encodedString += cluster.ToEncodedString()
	}
	return encodedString
}

func RunLengthDecode(input string) string {
	decodedString := ""
	clusters := make([]Cluster, 0)
	pattern := regexp.MustCompile("(\\d+)([a-zA-z])|([a-zA-z]|\\s{1})")
	matches := pattern.FindAllStringSubmatch(input, -1)
	fmt.Printf("Found %d matches\n", len(matches))

	var cluster Cluster
	for _, match := range matches {
		numMatches := len(match)
		if numMatches == 0 {
			continue
		}

		for ix, group := range match {
			fmt.Printf("match[%d] = %s\n", ix, group)
		}
		fmt.Printf("\n")

		count, err := strconv.Atoi(match[1])

		if err == nil && count > 0 && numMatches >= 3 {
			ch := []rune(match[2])[0]
			cluster = NewClusterFromEncoded(ch, count)
		} else if numMatches >= 2 {
			ch := []rune(match[0])[0]
			cluster = NewClusterFromEncoded(ch, 1)
		}
		clusters = append(clusters, cluster)
	}

	for _, cluster := range clusters {
		decodedString += cluster.ToDecodedString()
	}
	return decodedString
}
